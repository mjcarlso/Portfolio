---
title: "Transportation Emissions"
---

# CO2 Emission Function

```{r, eval = F}
"CO2TransportEmissions"<-
  function(CO2.EF = 69300, fuel.amount = 10000)
    # Script developed by M. Carlson
    # Originally Developed: February 11, 2022
    # Last Updated: February 11, 2022
    # Script estimated CO2 emissions from road transportation using default equations from
    # 2006 IPCC guidelines
    # Results are in MMT CO2
    #
    ####### Arguments
    # CO2.EF             CO2 emission factor in kg/TJ
    # fuel.amount        Amount of fuel in TJ
    #
    ####### Start Script
  {
    #######Check Validity of Input Data
    # Check that input fuel data are valid
    check.fuel.amount<-fuel.amount>0
    if(!check.fuel.amount)  {stop("The amount of fuel must be greater than 0.")
    }
    # Check that EF is valid
    check.CO2.EF<-CO2.EF>0
    if(!check.CO2.EF)  {stop("The emission factor must be greater than 0.")
      }
    #
    ####### Estimate CO2 emissions
    # IPCC 2006 GL: CO2 emissions = fuel.amount * EF
    # Units: CO2 emissions are in kg, fuel.amount is in TJ, and EF is in kg/TJ
    CO2.emissions.kg<-fuel.amount*CO2.EF
    #
    # convert into MMT
    CO2.emissions.MMT<-CO2.emissions.kg/10^9
    #
    ####### Check results
    check.emisison.amount<-CO2.emissions.MMT>0
    if(!check.emisison.amount)  {stop("The amount of emissions must be greater than 0.")
    }
    #
    ####### Return Statement
    return(list("CO2.emissions.MMT" = CO2.emissions.MMT))
    #
    ####### End Script
  }
```

# Other GHG Emissions Function

```{r, eval=FALSE}
"CH4N2OTransportEmissions"<-
  function(input.filename = "NAME", vehicle.type = 1)
    # Script developed by M. Carlson
    # Originally Developed: February 16, 2022
    # Last Updated: February 16, 2022
    # Script estimates CH4 and N2O emissions from road transportation using default equations
    # from 2006 IPCC guidelines
    #
    ####### Arguements
    # input.file          Name of file with activity data, which is a comma delimited file
    #                     with the emissions factors and input
    #                     activity data in columns along with header row as follows:
    #                     vehicle type, fuel amount (TJ), CH4 emission factor (kg/TJ),
    #                     and N2O emission factor (lg/TJ).
    # vehicle.type        Number of vehicle types in the input file
    # #
    ####### Begin script
    {
    ####### Import files
    #getwd()
    input.data<-read.csv(file = input.filename, header = T, sep = ",", fill = F)
    #
    ####### Check number of vehicle types in input file
    check.type<-length(input.data[,1])==vehicle.type
    if(!check.type) {stop("The number of vehicles types in the input file is not 
                          consistent withthe number entered in the function argument.")
      }
    #
    ####### Check Validity of Input Data
    for (f in (1:vehicle.type)){
      check.fuel.amount<-input.data[f,3]>0
      if(!check.fuel.amount){stop("Fuel amount must be greater than 0 - Check input file.")
      }
      check.CH4.ef<-input.data[f,4]>0
      if(!check.CH4.ef){stop("Methane EF must be greater than 0 - Check input file.")
      }
      check.N2O.ef<-input.data[f,5]>0
      if(!check.N2O.ef){stop("Nitrous oxide EF must be greater than 0 - Check input file.")
      } 
    }
    #
    ####### Calculate emission
    # IPCC 2006 GL: CH4 emissions = Fuel.amount * EF
    # Units: CH4 emissions in kg, Fuel.amount in TJ and EF is kg/TJ
    #
    CH4.emissions.kg<-vector(mode = "numeric", length = vehicle.type)
    for (ch in (1:vehicle.type)) {
      CH4.emissions.kg[ch]<-input.data[ch,3]*input.data[ch,4]
      # Check Emissions
      check.CH4.emission.kg<-CH4.emissions.kg[ch]>0&CH4.emissions.kg[ch]<=10^12
      if(!check.CH4.emission.kg){cat("Warning: Methane emissions are not within the expected range.")
      }
    }
    # IPCC 2006 GL: N2O emissions = Fuel.amount * EF
    N2O.emissions.kg<-vector(mode = "numeric", length = vehicle.type)
    for (n2o in (1:vehicle.type)) {
      N2O.emissions.kg[n2o]<-input.data[n2o,3]*input.data[n2o,5]
      # Check Emissions
      check.N2O.emission.kg<-N2O.emissions.kg[n2o]>0&N2O.emissions.kg[n2o]<=10^12
      if(!check.N2O.emission.kg){cat("Warning: Methane emissions are not within the expected range.")
      }
    }
    # Total emissions in CO2 eq.
    Total.CH4.TMT.CO2e<-(sum(CH4.emissions.kg)/10^6)*25
    Total.N2O.TMT.CO2e<-(sum(CH4.emissions.kg)/10^6)*298
    Total.CH4.N2O.MMT.CO2e<-(Total.CH4.TMT.CO2e+Total.N2O.TMT.CO2e)/10^3
    #
    ####### Return Statement
    return(list("Total.CH4.TMT.CO2e" = Total.CH4.TMT.CO2e,
                "Total.N2O.TMT.CO2e" = Total.N2O.TMT.CO2e,
                "Total.CH4.N2O.MMT.CO2e" = Total.CH4.N2O.MMT.CO2e))
    #
    ####### End script
  } 

```
