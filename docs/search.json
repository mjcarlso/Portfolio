[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Greenhouse Gas Accounting Portfolio",
    "section": "",
    "text": "Talk about myself\n------------------------------------------\n\n\nMasters in Ecosystem Science and Sustainability | Colorado State University 2021-2023\nBachelors in Environmental Studies | Kenyon College 2015 - 2019\n------------------------------------------"
  },
  {
    "objectID": "UreaEmissions.html",
    "href": "UreaEmissions.html",
    "title": "Urea Emissions Function",
    "section": "",
    "text": "Urea Fertilization\nThis function was developed by M. Carlson\nOrigionally developed: 8/25/2022\nLast updated:\nData used in this function is in\n\n\"Urea.Fert.Emisssions\"<-\n  function(input.file = \"name\", nyears = 31, states = 50, EF = .2, EF.min = .1,\n           EF.max = .2, nreps = 10000, iseed = 213456, return.option = 1)\n    # Input data converted from N to Urea\n    \n##### Begin script\n  {\n    # Seed seed\n    set.seed(iseed)\n    \n    ####### Import files\n    input.data<-read.csv(file = input.file)\n    \n    ####### Check Validity of Input Data\n    # Numeric\n    for (n in 1:(nyears*2)) {\n      input.data[,n+1]<-as.numeric(input.data[,n+1])\n    }\n    \n    # Urea Amounts\n    for (y in (1:nyears)){\n      for (t in (1:states)){\n    check.urea<-input.data[t,y+1]>0\n    if(!check.urea){stop(\"Error: Data is zero or negative.\")}\n      }\n    }\n    \n    # SD\n    for (y in (1:nyears)){\n      for (t in (1:states)){\n        check.sd<-input.data[t,y+1+nyears]>0\n        if(!check.sd){stop(\"Error: Data is zero or negative.\")}\n      }\n    }\n    \n    \n    ######## Deterministic results\n    Deterministic.CO2C<-matrix(0, nrow = states, ncol = nyears)\n    for(y in (1:nyears)){\n      for(d in (1:states)){\n        Deterministic.CO2C[d,y]<-(input.data[d,y+1]*EF)\n      }\n    }\n    \n    ##\n    Deterministic.CO2C.total<-apply(Deterministic.CO2C, MAR = 2, FUN = \"sum\")\n    Deterministic.CO2.total<-(Deterministic.CO2C.total*(44/12)/10^6)\n    Deterministic.CO2<-Deterministic.CO2C*(44/12)/10^6\n      \n    ######## Sim nreps \n    # EF\n    EF.sim<-rtriangle(nreps, a = EF.min, b = EF.max, c = EF)  \n    \n    \n    q.factor<-quantile(EF.sim, probs = c(.05,1))\n    down.factor<-q.factor[1]\n    up.factor<-q.factor[2]\n    \n    # Urea\n    urea.sim<-matrix(0, nrow = states*nyears, ncol = nreps)\n    for (y in (1:nyears)) {\n      for (t in (1:states)) {\n        urea.sim[t+(y-1)*50,]<-rnorm(n = nreps, mean = input.data[t, y+1], \n                                sd = input.data[t, y+1+nyears])\n      }\n    }\n    \n    ######## Probabilistic results\n    Probabilistic.CO2C<-matrix(0, nrow = states*nyears, ncol = nreps)\n    for (y in 1:nyears) {\n      for (s in 1:states) {\n        Probabilistic.CO2C[s+(states*(y-1)),]<-EF.sim*urea.sim[s+(states*(y-1)),]\n      }\n    }\n    \n    \n    # find mode\n    mode<-function(x){which.max(tabulate(x))}\n  \n    results.mode<-apply(Probabilistic.CO2C, 1, mode)\n    results.mode<-as.data.frame(results.mode)\n    \n    \n    \n    # Convert to Gg CO2\n    results.mode<-(results.mode*(44/12)/10^6)\n\n    # Make into readable df\n    State<-rep(c(\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\n             \"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\n             \"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\n             \"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\n             \"New Hampsire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\n             \"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\n             \"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\n             \"Wisconsin\",\"Wyoming\"),times=nyears)\n    results.mode$State<-data.frame(State)\n\n    newinput<-input.data[,1:32]\n    newinput<-newinput%>%\n      pivot_longer(!State, names_to = \"Year\", values_to = \"Urea\")\n    newinput<-newinput[order(newinput$Year),]\n    results.mode$xYear<-newinput$Year\n    \n    results.mode$emissions<-results.mode$results.mode\n    results.mode<-results.mode[,2:4]\n    \n    Probabilistic.CO2<-results.mode%>%\n      pivot_wider(names_from = \"xYear\", values_from = \"emissions\")\n    \n  mode2<-function(v, n=2){\n    v<-round(v,n)\n    u<-unique(v)\n    u[which.max(tabulate(match(v,u)))]\n  }\n    \n    \nProb.CO2C.state<-matrix(0, nrow = states*nyears, ncol = 3)\nfor (y in (1:(nyears*states))) {\n  Prob.CO2C.state[y,1]<-mode2(Probabilistic.CO2C[y,])\n  q<-quantile(Probabilistic.CO2C[y,], probs = c(.05,1))\n  Prob.CO2C.state[y,2]<-q[1]\n  Prob.CO2C.state[y,3]<-q[2]\n}\n\nProb.CO2.state<-(Prob.CO2C.state*(44/12)/10^6)\ncolnames(Prob.CO2.state)<-c(\"Mode\", \"5 Percentile\", \"100 Percentile\")\nrownames(Prob.CO2.state)<-State\nProb.CO2.state<-as.data.frame(Prob.CO2.state)\nProb.CO2.state$xYear<-newinput$Year\n\n  \n  \n    ##### Total probabilistic  per year\n    \n    Probabilistic.CO2C.total.US<-matrix(0, nrow = nyears, ncol = nreps)\n    for (y in (1:nyears)){\n     Probabilistic.CO2C.total.US[y,]<-apply(Probabilistic.CO2C[(1+(50*(y-1))):(50+(50*(y-1))),], MARG = 2, FUN = \"sum\")\n    }\n    \n    Total.emissions.results.CO2C<-matrix(0, nrow = nyears, ncol = 3)\n    for (y in (1:nyears)) {\n     Total.emissions.results.CO2C[y,1]<-mode2(Probabilistic.CO2C.total.US[y,1]) \n     q<-quantile(Probabilistic.CO2C.total.US[y,1], probs = c(.05,1))\n     Total.emissions.results.CO2C[y,2]<-q[1]\n     Total.emissions.results.CO2C[y,3]<-q[2]\n    }\n    \n    Total.emissions.results<-(Total.emissions.results.CO2C*(44/12)/10^6)\n    colnames(Total.emissions.results)<-c(\"Mode\", \"5 Percentile\", \"100 Percentile\")\n    rownames(Total.emissions.results)<-c(1990:2020)\n    \n    ######## Check that probabilistic is less than or equal to deterministic\n    # per state per year\n   # for (y in (1:nyears)){\n   #   for (t in (1:states)){\n    #    check.results<-Probabilistic.CO2[t,y]<=Deterministic.CO2[t,y]\n     #   if(!check.results){stop(\"Error: Probabilistic emissions are too high.\")}}}\n    \n    # per country per year\n    #for (y in (1:nyears)){\n     #   check.results.total<-Probabilistic.CO2.total[,y]<=Deterministic.CO2.total[,y]\n      #  if(!check.results.total){stop(\"Error: Total probabilistic emissions for the \n       #                               country are too high.\")}}\n    \n    ######## Return Statement\n    if(return.option == 1){\n      return(Total.emissions.results)\n    }\n    if(return.option == 2){\n      return(Prob.CO2.state)\n    }\n    if(return.option == 3){\n      return(Deterministic.CO2)\n    }\n    \n    \n###### End script\n    }\n\n\nTotal.Emissions.year<-Urea.Fert.Emisssions(input.file = \"data/US-Urea1990-2020.csv\", return.option = 1)\nhead(Total.Emissions.year)\n\n         Mode 5 Percentile 100 Percentile\n1990 4.184332     4.184332       4.184332\n1991 4.011988     4.011988       4.011988\n1992 4.292598     4.292598       4.292598\n1993 4.571429     4.571429       4.571429\n1994 4.641019     4.641019       4.641019\n1995 4.588808     4.588808       4.588808"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "example",
    "section": "",
    "text": "this is a test"
  }
]